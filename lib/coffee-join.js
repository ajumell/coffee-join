// Generated by CoffeeScript 1.6.1
(function() {
  var SourceMapConsumer, SourceMapGenerator, basename, coffeeScript, colors, compile, concat_files, dirname, print, process, re_order_source_map, read, relative, write, _ref, _ref1;

  coffeeScript = require("coffee-script");

  _ref = require("./utils"), print = _ref.print, relative = _ref.relative, dirname = _ref.dirname, read = _ref.read, write = _ref.write, basename = _ref.basename;

  _ref1 = require('source-map'), SourceMapConsumer = _ref1.SourceMapConsumer, SourceMapGenerator = _ref1.SourceMapGenerator;

  colors = require("colors");

  compile = function(code, name, bare) {
    var ret;
    if (name == null) {
      name = "file.coffee";
    }
    if (bare == null) {
      bare = true;
    }
    ret = coffeeScript.compile(code, {
      bare: bare,
      sourceMap: true,
      filename: name
    });
    return {
      code: ret.js,
      map: JSON.parse(ret.v3SourceMap)
    };
  };

  re_order_source_map = function(line_number_mapping, map, out_js_file, out_map_file, code) {
    var generator, rel_js_file, rel_map_file, sourceMap;
    rel_map_file = relative(dirname(out_js_file), out_map_file);
    rel_js_file = relative(dirname(out_map_file), out_js_file);
    code += "\n//@ sourceMappingURL=" + rel_map_file;
    generator = new SourceMapGenerator({
      file: rel_js_file
    });
    map = new SourceMapConsumer(map);
    map.eachMapping(function(mapping) {
      var line, path;
      line = line_number_mapping[mapping.originalLine - 1];
      path = relative(dirname(out_js_file), line.path);
      mapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        },
        original: {
          line: line.line_number,
          column: mapping.originalColumn
        },
        source: path
      };
      return generator.addMapping(mapping);
    });
    sourceMap = generator.toString();
    return {
      sourceMap: sourceMap,
      code: code
    };
  };

  concat_files = function(files) {
    var code, file, file_name, line, line_number, line_number_mapping, lines, map, source, sourceLines, _i, _j, _len, _len1, _ref2;
    sourceLines = [];
    line_number_mapping = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      source = read(file);
      lines = source.split("\n");
      file_name = file;
      line_number = 1;
      for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
        line = lines[_j];
        sourceLines.push(line);
        line_number_mapping.push({
          path: file_name,
          line_number: line_number
        });
        line_number += 1;
      }
    }
    source = sourceLines.join("\n");
    try {
      _ref2 = compile(source, "main.coffee", false), code = _ref2.code, map = _ref2.map;
    } catch (ex) {
      print("Error occured while compiling coffeescript.".red);
      print(source);
      process.exit(1);
    }
    return {
      code: code,
      map: map,
      line_number_mapping: line_number_mapping
    };
  };

  process = function(files, output) {
    var code, line_number_mapping, map, out_js_file, out_map_file, sourceMap, _ref2, _ref3;
    output = basename(output, ".js");
    out_js_file = output + ".js";
    out_map_file = output + ".map";
    _ref2 = concat_files(files), code = _ref2.code, map = _ref2.map, line_number_mapping = _ref2.line_number_mapping;
    _ref3 = re_order_source_map(line_number_mapping, map, out_js_file, out_map_file, code), sourceMap = _ref3.sourceMap, code = _ref3.code;
    write(out_js_file, code);
    return write(out_map_file, sourceMap);
  };

  module.exports = {
    compile: compile,
    concat_files: concat_files,
    re_order_source_map: re_order_source_map,
    process: process
  };

}).call(this);
